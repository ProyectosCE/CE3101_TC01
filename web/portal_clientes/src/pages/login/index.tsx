import Head from "next/head";
import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { useAuthStore } from '@/stores/authStore';
import { API_ENDPOINT } from '@/config/api';
import styles from "@/styles/login.module.css";
import { Button, Form } from 'react-bootstrap';
import "bootstrap/dist/css/bootstrap.min.css";

export default function LoginPage() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const { isLoggedIn, login } = useAuthStore();

  useEffect(() => {
    if (isLoggedIn) {
      router.push('/');
    } else {
      setIsLoading(false);
    }
  }, [isLoggedIn, router]);

  const handleSignIn = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await fetch(`${API_ENDPOINT}Clientes/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ usuario: username, password }),
      });

      if (response.status === 401) {
        setError('Usuario o contraseña inválidos');
        return;
      }

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      if (data.login === 'valid') {
        const userInfoResponse = await fetch(`${API_ENDPOINT}Clientes/userInfo/${username}`);
        if (!userInfoResponse.ok) {
          throw new Error('Error fetching user info');
        }
        const userInfo = await userInfoResponse.json();
        
        login(username, userInfo);
        router.push('/');
      }
    } catch (err) {
      console.error('Error during login:', err);
      setError('Error al conectar con el servidor');
    }
  };

  if (isLoading) {
    return null; // Render nothing while loading
  }

  return (
    <>
      <Head>
        <title>LOGIN - TECBANK CLIENTES</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.container}>
        <div className={styles.header}>
          <h2 className={styles.title_header}>TECBANK | PORTAL CLIENTES</h2>
        </div>
        <div className={styles.body}>
          <div className={styles.formContainer}>
            <div className={styles.logoContainer}>
              <img
                className={styles.logo}
                src="https://tailwindcss.com/plus-assets/img/logos/mark.svg?color=indigo&shade=600"
                alt="Your Company"
              />
              <h3 className={styles.title}>Inicio de sesión</h3>
            </div>
            <div className={styles.formContent}>
              <Form className={styles.form} action="#" method="POST" onSubmit={handleSignIn}>
                <div>
                  <Form.Label htmlFor="username" className={styles.label}>Usuario</Form.Label>
                  <div className={styles.inputWrapper}>
                    <Form.Control
                      type="text"
                      name="username"
                      id="username"
                      autoComplete="username"
                      required
                      className={styles.input}
                      value={username}
                      onChange={(e) => setUsername(e.target.value)}
                      placeholder="Ingrese su usuario"
                    />
                  </div>
                </div>
                <div>
                  <div className={styles.passwordWrapper}>
                    <Form.Label htmlFor="password" className={styles.label}>Contraseña</Form.Label>
                    <div className={styles.forgotPasswordLink}>
                      <a href="#" className={styles.link}>Olvidaste la contraseña?</a>
                    </div>
                  </div>
                  <div className={styles.inputWrapper}>
                    <Form.Control
                      type="password"
                      name="password"
                      id="password"
                      autoComplete="current-password"
                      required
                      className={styles.input}
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      placeholder="Ingrese su contraseña"
                    />
                  </div>
                </div>
                {error && <div className="alert alert-danger">{error}</div>}
                <div>
                  <Button
                    type="submit"
                    className={styles.submitButton}
                  >
                    Iniciar Sesión
                  </Button>
                </div>
              </Form>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
